{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0xDD57B15C953B51F9a1b7f40aED11b408Faf5f245",
      "txHash": "0x8c4631c4f7b4ce36a2068349f28cd09236dc6c9d3bf3c3525a82efc57e403378",
      "kind": "uups"
    },
    {
      "address": "0x01525Af80EDD9E61d03a516b8Af15ad47a988b32",
      "txHash": "0x71961de1af9e7e8476c4c163db276a94fba5f5220c2ebaf7d17a692205ade376",
      "kind": "uups"
    },
    {
      "address": "0x96785B56aef1fEBc97a660Dd86957041432d3fbC",
      "txHash": "0x846f1ed3b5b6a9294685c44a7e435e3bdf69cc785fedab8d8c1bc850c574730c",
      "kind": "uups"
    },
    {
      "address": "0x07D325030dA1A8c1f96C414BFFbe4fBD539CED45",
      "txHash": "0x56b04d74169856b5440c790832841d5101104794f36147d1205a2f144cc0b78b",
      "kind": "uups"
    }
  ],
  "impls": {
    "65643f06bf218cc077e4dda25767334eba62fd7403cd88e70288534b4cd2b1d0": {
      "address": "0x3fF3c213d6b684B60246dccDfE205E775E5A592f",
      "txHash": "0x0063f4e363a247122f82e78c2d67d4ec05d5cfefeafa32a1f7acc74ca6f503fc",
      "layout": {
        "solcVersion": "0.8.22",
        "storage": [
          {
            "label": "signers",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage",
            "contract": "MultSigTimeLock",
            "src": "contracts/MultSigTimeLock.sol:22"
          },
          {
            "label": "requiredApproveCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "MultSigTimeLock",
            "src": "contracts/MultSigTimeLock.sol:23"
          },
          {
            "label": "minDelaySeconds",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256",
            "contract": "MultSigTimeLock",
            "src": "contracts/MultSigTimeLock.sol:24"
          },
          {
            "label": "proposals",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_struct(Proposal)5707_storage)",
            "contract": "MultSigTimeLock",
            "src": "contracts/MultSigTimeLock.sol:26"
          },
          {
            "label": "approvals",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
            "contract": "MultSigTimeLock",
            "src": "contracts/MultSigTimeLock.sol:27"
          },
          {
            "label": "proposalCount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "MultSigTimeLock",
            "src": "contracts/MultSigTimeLock.sol:28"
          },
          {
            "label": "disableUpgrade",
            "offset": 0,
            "slot": "6",
            "type": "t_bool",
            "contract": "MultSigTimeLock",
            "src": "contracts/MultSigTimeLock.sol:41"
          },
          {
            "label": "canUpgradeAddress",
            "offset": 1,
            "slot": "6",
            "type": "t_address",
            "contract": "MultSigTimeLock",
            "src": "contracts/MultSigTimeLock.sol:42"
          },
          {
            "label": "proposal2ExecuteExpireAt",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "MultSigTimeLock",
            "src": "contracts/MultSigTimeLock.sol:44"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_struct(InitializableStorage)65_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_bytes_storage": {
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_enum(ProposalType)5738": {
            "label": "enum MultSigTimeLock.ProposalType",
            "members": [
              "Normal",
              "UpgradeContract",
              "AddSigner",
              "RemoveSigner",
              "UpdateMinDelaySeconds",
              "DisableContractUpgrade"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
            "label": "mapping(uint256 => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Proposal)5707_storage)": {
            "label": "mapping(uint256 => struct MultSigTimeLock.Proposal)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(Proposal)5707_storage": {
            "label": "struct MultSigTimeLock.Proposal",
            "members": [
              {
                "label": "target",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "data",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "canExecuteAfterTimestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "canVoteBeforeTimestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "executed",
                "type": "t_bool",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "proposalType",
                "type": "t_enum(ProposalType)5738",
                "offset": 1,
                "slot": "4"
              },
              {
                "label": "newSigner",
                "type": "t_address",
                "offset": 2,
                "slot": "4"
              },
              {
                "label": "minDelaySeconds",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "canUpgradeAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "2a9a0333f9dd68a30792beada36c35d1983e119740a9d28ec78e034d83a1a525": {
      "address": "0xB453385bD3D6c45069F31ccC5a1E669e3DEB854F",
      "txHash": "0xe32370890e0857104434e445e5ba396c01671b3e7a6608ed78e05f795166b89a",
      "layout": {
        "solcVersion": "0.8.22",
        "storage": [
          {
            "label": "timeLock",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(MultSigTimeLock)7037",
            "contract": "Token",
            "src": "contracts/Token.sol:24"
          },
          {
            "label": "isLockActive",
            "offset": 20,
            "slot": "0",
            "type": "t_bool",
            "contract": "Token",
            "src": "contracts/Token.sol:28"
          },
          {
            "label": "walletLockTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_array(t_struct(LockInfo)7076_storage)dyn_storage)",
            "contract": "Token",
            "src": "contracts/Token.sol:36"
          },
          {
            "label": "initSupply",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256",
            "contract": "Token",
            "src": "contracts/Token.sol:38"
          },
          {
            "label": "maxSupply",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256",
            "contract": "Token",
            "src": "contracts/Token.sol:39"
          },
          {
            "label": "minter2MintAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "Token",
            "src": "contracts/Token.sol:41"
          },
          {
            "label": "lockTransferAdmins",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "Token",
            "src": "contracts/Token.sol:42"
          },
          {
            "label": "canUpgradeAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address",
            "contract": "Token",
            "src": "contracts/Token.sol:44"
          },
          {
            "label": "disableUpgrade",
            "offset": 20,
            "slot": "6",
            "type": "t_bool",
            "contract": "Token",
            "src": "contracts/Token.sol:45"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(EIP712Storage)469_storage": {
            "label": "struct EIP712Upgradeable.EIP712Storage",
            "members": [
              {
                "label": "_hashedName",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_version",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ERC20Storage)201_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)65_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(NoncesStorage)374_storage": {
            "label": "struct NoncesUpgradeable.NoncesStorage",
            "members": [
              {
                "label": "_nonces",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)413_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_array(t_struct(LockInfo)7076_storage)dyn_storage": {
            "label": "struct Token.LockInfo[]",
            "numberOfBytes": "32"
          },
          "t_contract(MultSigTimeLock)7037": {
            "label": "contract MultSigTimeLock",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_array(t_struct(LockInfo)7076_storage)dyn_storage)": {
            "label": "mapping(address => struct Token.LockInfo[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_struct(LockInfo)7076_storage": {
            "label": "struct Token.LockInfo",
            "members": [
              {
                "label": "lockedAt",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lockedAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "unlockAt",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Nonces": [
            {
              "contract": "NoncesUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:17",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.EIP712": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_hashedName",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_hashedVersion",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_version",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "6ec6705ef32d93e58690a4f36402e5355d743ffc2e74f76504e12a010af5a63a": {
      "address": "0xDB328bAa62F1979f7aAB4157dfb0eCEc9538F9B2",
      "txHash": "0xa997e6d18e035ed6c9de87c5b4902f5f4d874944f740860af2ac52c4e276b9b0",
      "layout": {
        "solcVersion": "0.8.22",
        "storage": [
          {
            "label": "timeLock",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(MultSigTimeLock)7037",
            "contract": "Token",
            "src": "contracts/Token.sol:24"
          },
          {
            "label": "isLockActive",
            "offset": 20,
            "slot": "0",
            "type": "t_bool",
            "contract": "Token",
            "src": "contracts/Token.sol:28"
          },
          {
            "label": "walletLockTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_array(t_struct(LockInfo)7076_storage)dyn_storage)",
            "contract": "Token",
            "src": "contracts/Token.sol:36"
          },
          {
            "label": "initSupply",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256",
            "contract": "Token",
            "src": "contracts/Token.sol:38"
          },
          {
            "label": "maxSupply",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256",
            "contract": "Token",
            "src": "contracts/Token.sol:39"
          },
          {
            "label": "minter2MintAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "Token",
            "src": "contracts/Token.sol:41"
          },
          {
            "label": "lockTransferAdmins",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "Token",
            "src": "contracts/Token.sol:42"
          },
          {
            "label": "canUpgradeAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address",
            "contract": "Token",
            "src": "contracts/Token.sol:44"
          },
          {
            "label": "disableUpgrade",
            "offset": 20,
            "slot": "6",
            "type": "t_bool",
            "contract": "Token",
            "src": "contracts/Token.sol:45"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(EIP712Storage)469_storage": {
            "label": "struct EIP712Upgradeable.EIP712Storage",
            "members": [
              {
                "label": "_hashedName",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_version",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ERC20Storage)201_storage": {
            "label": "struct ERC20Upgradeable.ERC20Storage",
            "members": [
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_totalSupply",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "4"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(InitializableStorage)65_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(NoncesStorage)374_storage": {
            "label": "struct NoncesUpgradeable.NoncesStorage",
            "members": [
              {
                "label": "_nonces",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ReentrancyGuardStorage)413_storage": {
            "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
            "members": [
              {
                "label": "_status",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_array(t_struct(LockInfo)7076_storage)dyn_storage": {
            "label": "struct Token.LockInfo[]",
            "numberOfBytes": "32"
          },
          "t_contract(MultSigTimeLock)7037": {
            "label": "contract MultSigTimeLock",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_array(t_struct(LockInfo)7076_storage)dyn_storage)": {
            "label": "mapping(address => struct Token.LockInfo[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_struct(LockInfo)7076_storage": {
            "label": "struct Token.LockInfo",
            "members": [
              {
                "label": "lockedAt",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "lockedAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "unlockAt",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.Nonces": [
            {
              "contract": "NoncesUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:17",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.EIP712": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_hashedName",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_hashedVersion",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_version",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45",
              "offset": 0,
              "slot": "4"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    },
    "eb343bf66090289a711d74ede89351a6ad993d4e2bf16ae1ca48a499e2d08c17": {
      "address": "0xd0B661cAF40174c0F2564da3524fFc18B38a0829",
      "txHash": "0x141234fb4e78929f005709d844c2c4a010fa45ada8118952b5f8efc841b2ee39",
      "layout": {
        "solcVersion": "0.8.22",
        "storage": [
          {
            "label": "signers",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage",
            "contract": "MultSigTimeLock",
            "src": "contracts/MultSigTimeLock.sol:22"
          },
          {
            "label": "requiredApproveCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "MultSigTimeLock",
            "src": "contracts/MultSigTimeLock.sol:23"
          },
          {
            "label": "minDelaySeconds",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256",
            "contract": "MultSigTimeLock",
            "src": "contracts/MultSigTimeLock.sol:24"
          },
          {
            "label": "proposals",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_struct(Proposal)5707_storage)",
            "contract": "MultSigTimeLock",
            "src": "contracts/MultSigTimeLock.sol:26"
          },
          {
            "label": "approvals",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
            "contract": "MultSigTimeLock",
            "src": "contracts/MultSigTimeLock.sol:27"
          },
          {
            "label": "proposalCount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "MultSigTimeLock",
            "src": "contracts/MultSigTimeLock.sol:28"
          },
          {
            "label": "disableUpgrade",
            "offset": 0,
            "slot": "6",
            "type": "t_bool",
            "contract": "MultSigTimeLock",
            "src": "contracts/MultSigTimeLock.sol:41"
          },
          {
            "label": "canUpgradeAddress",
            "offset": 1,
            "slot": "6",
            "type": "t_address",
            "contract": "MultSigTimeLock",
            "src": "contracts/MultSigTimeLock.sol:42"
          },
          {
            "label": "proposal2ExecuteExpireAt",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "MultSigTimeLock",
            "src": "contracts/MultSigTimeLock.sol:44"
          }
        ],
        "types": {
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_struct(InitializableStorage)65_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_bytes_storage": {
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_enum(ProposalType)5738": {
            "label": "enum MultSigTimeLock.ProposalType",
            "members": [
              "Normal",
              "UpgradeContract",
              "AddSigner",
              "RemoveSigner",
              "UpdateMinDelaySeconds",
              "DisableContractUpgrade"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
            "label": "mapping(uint256 => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Proposal)5707_storage)": {
            "label": "mapping(uint256 => struct MultSigTimeLock.Proposal)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(Proposal)5707_storage": {
            "label": "struct MultSigTimeLock.Proposal",
            "members": [
              {
                "label": "target",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "data",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "canExecuteAfterTimestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "canVoteBeforeTimestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "executed",
                "type": "t_bool",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "proposalType",
                "type": "t_enum(ProposalType)5738",
                "offset": 1,
                "slot": "4"
              },
              {
                "label": "newSigner",
                "type": "t_address",
                "offset": 2,
                "slot": "4"
              },
              {
                "label": "minDelaySeconds",
                "type": "t_uint256",
                "offset": 0,
                "slot": "5"
              },
              {
                "label": "canUpgradeAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "6"
              }
            ],
            "numberOfBytes": "224"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    }
  }
}
